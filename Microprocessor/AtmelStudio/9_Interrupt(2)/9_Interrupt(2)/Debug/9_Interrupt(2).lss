
9_Interrupt(2).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001d0  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  00000274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001ae  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011f  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fc  00000000  00000000  000005b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c2  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000194  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000bba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__vector_5>
  16:	00 00       	nop
  18:	6b c0       	rjmp	.+214    	; 0xf0 <__vector_6>
  1a:	00 00       	nop
  1c:	7d c0       	rjmp	.+250    	; 0x118 <__vector_7>
  1e:	00 00       	nop
  20:	8f c0       	rjmp	.+286    	; 0x140 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ed       	ldi	r30, 0xD0	; 208
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	52 d0       	rcall	.+164    	; 0x168 <main>
  c4:	83 c0       	rjmp	.+262    	; 0x1cc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_5>:
#include <util/delay.h>
unsigned char SEG[16]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,0x88,0x83,0xc6,0xa1,0x8e};

int interval;

ISR(INT4_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	interval=1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 11 01 	sts	0x0111, r25
  de:	80 93 10 01 	sts	0x0110, r24
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_6>:
ISR(INT5_vect){
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
	interval=2;
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 11 01 	sts	0x0111, r25
 106:	80 93 10 01 	sts	0x0110, r24
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <__vector_7>:
ISR(INT6_vect){
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
	interval=-2;
 126:	8e ef       	ldi	r24, 0xFE	; 254
 128:	9f ef       	ldi	r25, 0xFF	; 255
 12a:	90 93 11 01 	sts	0x0111, r25
 12e:	80 93 10 01 	sts	0x0110, r24
}
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_8>:
ISR(INT7_vect){
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
	interval=-1;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	9f ef       	ldi	r25, 0xFF	; 255
 152:	90 93 11 01 	sts	0x0111, r25
 156:	80 93 10 01 	sts	0x0110, r24
}
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <main>:

int main(void)
{
	int n=0;
	DDRA=0xff;
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xff;
 16c:	87 bb       	out	0x17, r24	; 23
	DDRE=0x00;
 16e:	12 b8       	out	0x02, r1	; 2
	PORTE=0xf0;
 170:	80 ef       	ldi	r24, 0xF0	; 240
 172:	83 b9       	out	0x03, r24	; 3
	EIMSK=0b11110000;
 174:	89 bf       	out	0x39, r24	; 57
	EICRB=0b10101010;
 176:	9a ea       	ldi	r25, 0xAA	; 170
 178:	9a bf       	out	0x3a, r25	; 58
	SREG=0x80;
 17a:	90 e8       	ldi	r25, 0x80	; 128
 17c:	9f bf       	out	0x3f, r25	; 63
	PORTB=0xf0;
 17e:	88 bb       	out	0x18, r24	; 24
	interval=-1;
}

int main(void)
{
	int n=0;
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
	PORTB=0xf0;
    while(1)
    {
        PORTA=SEG[n];
		n=n+interval;
		if(n>=16) n=0;
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	40 e0       	ldi	r20, 0x00	; 0
		if(n<0) n=15;
 188:	7f e0       	ldi	r23, 0x0F	; 15
 18a:	60 e0       	ldi	r22, 0x00	; 0
	EICRB=0b10101010;
	SREG=0x80;
	PORTB=0xf0;
    while(1)
    {
        PORTA=SEG[n];
 18c:	fc 01       	movw	r30, r24
 18e:	e0 50       	subi	r30, 0x00	; 0
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	20 81       	ld	r18, Z
 194:	2b bb       	out	0x1b, r18	; 27
		n=n+interval;
 196:	20 91 10 01 	lds	r18, 0x0110
 19a:	30 91 11 01 	lds	r19, 0x0111
 19e:	82 0f       	add	r24, r18
 1a0:	93 1f       	adc	r25, r19
		if(n>=16) n=0;
 1a2:	80 31       	cpi	r24, 0x10	; 16
 1a4:	91 05       	cpc	r25, r1
 1a6:	1c f4       	brge	.+6      	; 0x1ae <main+0x46>
		if(n<0) n=15;
 1a8:	99 23       	and	r25, r25
 1aa:	24 f0       	brlt	.+8      	; 0x1b4 <main+0x4c>
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <main+0x50>
	PORTB=0xf0;
    while(1)
    {
        PORTA=SEG[n];
		n=n+interval;
		if(n>=16) n=0;
 1ae:	85 2f       	mov	r24, r21
 1b0:	94 2f       	mov	r25, r20
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <main+0x50>
		if(n<0) n=15;
 1b4:	87 2f       	mov	r24, r23
 1b6:	96 2f       	mov	r25, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	3f ef       	ldi	r19, 0xFF	; 255
 1bc:	ec e2       	ldi	r30, 0x2C	; 44
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	30 40       	sbci	r19, 0x00	; 0
 1c2:	e0 40       	sbci	r30, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x56>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x60>
 1c8:	00 00       	nop
 1ca:	e0 cf       	rjmp	.-64     	; 0x18c <main+0x24>

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
