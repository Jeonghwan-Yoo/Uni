
15_Counter3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000278  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000278  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800110  00800110  0000031c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000010e  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000009f  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000161  00000000  00000000  00000521  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000157  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000be  00000000  00000000  00000853  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000911  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 31       	cpi	r26, 0x18	; 24
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a2 d0       	rcall	.+324    	; 0x208 <main>
  c4:	d7 c0       	rjmp	.+430    	; 0x274 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
#include <avr/interrupt.h>
#include <avr/io.h>

unsigned char SEG[16]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,0x88,0x83,0xc6,0xa1,0x86,0x8e};
int count=0,loop=0,num=0,tenNum=0;
ISR(TIMER0_OVF_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	if(count<10){ //FND 일의 자리만 킬 경우
  ec:	80 91 16 01 	lds	r24, 0x0116
  f0:	90 91 17 01 	lds	r25, 0x0117
  f4:	8a 30       	cpi	r24, 0x0A	; 10
  f6:	91 05       	cpc	r25, r1
  f8:	6c f5       	brge	.+90     	; 0x154 <__vector_16+0x8c>
		if(loop<100) loop++;
  fa:	20 91 14 01 	lds	r18, 0x0114
  fe:	30 91 15 01 	lds	r19, 0x0115
 102:	24 36       	cpi	r18, 0x64	; 100
 104:	31 05       	cpc	r19, r1
 106:	3c f4       	brge	.+14     	; 0x116 <__vector_16+0x4e>
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	30 93 15 01 	sts	0x0115, r19
 110:	20 93 14 01 	sts	0x0114, r18
 114:	65 c0       	rjmp	.+202    	; 0x1e0 <__vector_16+0x118>
		else{
			loop=0; num=count%10; PORTB=0xfe;
 116:	10 92 15 01 	sts	0x0115, r1
 11a:	10 92 14 01 	sts	0x0114, r1
 11e:	6a e0       	ldi	r22, 0x0A	; 10
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	81 d0       	rcall	.+258    	; 0x226 <__divmodhi4>
 124:	90 93 13 01 	sts	0x0113, r25
 128:	80 93 12 01 	sts	0x0112, r24
 12c:	8e ef       	ldi	r24, 0xFE	; 254
 12e:	88 bb       	out	0x18, r24	; 24
			PORTA=SEG[num]; count++;
 130:	e0 91 12 01 	lds	r30, 0x0112
 134:	f0 91 13 01 	lds	r31, 0x0113
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	80 81       	ld	r24, Z
 13e:	8b bb       	out	0x1b, r24	; 27
 140:	80 91 16 01 	lds	r24, 0x0116
 144:	90 91 17 01 	lds	r25, 0x0117
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	90 93 17 01 	sts	0x0117, r25
 14e:	80 93 16 01 	sts	0x0116, r24
 152:	46 c0       	rjmp	.+140    	; 0x1e0 <__vector_16+0x118>
		}
	}else{ //FND 10의자리 1의자리 모두 ON
		if(loop<100){ //1초미만 타이머
 154:	20 91 14 01 	lds	r18, 0x0114
 158:	30 91 15 01 	lds	r19, 0x0115
 15c:	24 36       	cpi	r18, 0x64	; 100
 15e:	31 05       	cpc	r19, r1
 160:	74 f5       	brge	.+92     	; 0x1be <__vector_16+0xf6>
			loop++;
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	3f 4f       	sbci	r19, 0xFF	; 255
 166:	30 93 15 01 	sts	0x0115, r19
 16a:	20 93 14 01 	sts	0x0114, r18
			if(loop%2==0){ //일의자리 FND
 16e:	20 fd       	sbrc	r18, 0
 170:	13 c0       	rjmp	.+38     	; 0x198 <__vector_16+0xd0>
				PORTB=0xfe; num=count%10;
 172:	8e ef       	ldi	r24, 0xFE	; 254
 174:	88 bb       	out	0x18, r24	; 24
 176:	80 91 16 01 	lds	r24, 0x0116
 17a:	90 91 17 01 	lds	r25, 0x0117
 17e:	6a e0       	ldi	r22, 0x0A	; 10
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	51 d0       	rcall	.+162    	; 0x226 <__divmodhi4>
 184:	90 93 13 01 	sts	0x0113, r25
 188:	80 93 12 01 	sts	0x0112, r24
				PORTA=SEG[num];
 18c:	fc 01       	movw	r30, r24
 18e:	e0 50       	subi	r30, 0x00	; 0
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	80 81       	ld	r24, Z
 194:	8b bb       	out	0x1b, r24	; 27
 196:	24 c0       	rjmp	.+72     	; 0x1e0 <__vector_16+0x118>
			}else{ //10의자리 FND
				PORTB=0xfd; tenNum=count/10;
 198:	8d ef       	ldi	r24, 0xFD	; 253
 19a:	88 bb       	out	0x18, r24	; 24
 19c:	80 91 16 01 	lds	r24, 0x0116
 1a0:	90 91 17 01 	lds	r25, 0x0117
 1a4:	6a e0       	ldi	r22, 0x0A	; 10
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	3e d0       	rcall	.+124    	; 0x226 <__divmodhi4>
 1aa:	70 93 11 01 	sts	0x0111, r23
 1ae:	60 93 10 01 	sts	0x0110, r22
				PORTA=SEG[tenNum];
 1b2:	fb 01       	movw	r30, r22
 1b4:	e0 50       	subi	r30, 0x00	; 0
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	80 81       	ld	r24, Z
 1ba:	8b bb       	out	0x1b, r24	; 27
 1bc:	11 c0       	rjmp	.+34     	; 0x1e0 <__vector_16+0x118>
			}
		}else{ //1초 타이머
			loop=0; count++;
 1be:	10 92 15 01 	sts	0x0115, r1
 1c2:	10 92 14 01 	sts	0x0114, r1
 1c6:	01 96       	adiw	r24, 0x01	; 1
			if(count==100) count=0;
 1c8:	84 36       	cpi	r24, 0x64	; 100
 1ca:	91 05       	cpc	r25, r1
 1cc:	29 f0       	breq	.+10     	; 0x1d8 <__vector_16+0x110>
			}else{ //10의자리 FND
				PORTB=0xfd; tenNum=count/10;
				PORTA=SEG[tenNum];
			}
		}else{ //1초 타이머
			loop=0; count++;
 1ce:	90 93 17 01 	sts	0x0117, r25
 1d2:	80 93 16 01 	sts	0x0116, r24
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <__vector_16+0x118>
			if(count==100) count=0;
 1d8:	10 92 17 01 	sts	0x0117, r1
 1dc:	10 92 16 01 	sts	0x0116, r1
		}
	}
	TCNT0=112; //타이머/카운터 레지스터 리셋
 1e0:	80 e7       	ldi	r24, 0x70	; 112
 1e2:	82 bf       	out	0x32, r24	; 50
}
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	bf 91       	pop	r27
 1ea:	af 91       	pop	r26
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	7f 91       	pop	r23
 1f2:	6f 91       	pop	r22
 1f4:	5f 91       	pop	r21
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0b be       	out	0x3b, r0	; 59
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <main>:

int main(void)
{
	DDRA=0xff;
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xff;
 20c:	87 bb       	out	0x17, r24	; 23
	TCCR0=0b00000111;
 20e:	97 e0       	ldi	r25, 0x07	; 7
 210:	93 bf       	out	0x33, r25	; 51
	TCNT0=112;
 212:	90 e7       	ldi	r25, 0x70	; 112
 214:	92 bf       	out	0x32, r25	; 50
	TIMSK=0b00000001; //TOIE0=0
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	97 bf       	out	0x37, r25	; 55
	SREG=0x80;
 21a:	90 e8       	ldi	r25, 0x80	; 128
 21c:	9f bf       	out	0x3f, r25	; 63
	PORTB=0xfe; //FND S0,S1,S2,S3
 21e:	9e ef       	ldi	r25, 0xFE	; 254
 220:	98 bb       	out	0x18, r25	; 24
	PORTA=0xff; //PORTA 초기값 oFF
 222:	8b bb       	out	0x1b, r24	; 27
 224:	ff cf       	rjmp	.-2      	; 0x224 <main+0x1c>

00000226 <__divmodhi4>:
 226:	97 fb       	bst	r25, 7
 228:	07 2e       	mov	r0, r23
 22a:	16 f4       	brtc	.+4      	; 0x230 <__divmodhi4+0xa>
 22c:	00 94       	com	r0
 22e:	06 d0       	rcall	.+12     	; 0x23c <__divmodhi4_neg1>
 230:	77 fd       	sbrc	r23, 7
 232:	08 d0       	rcall	.+16     	; 0x244 <__divmodhi4_neg2>
 234:	0b d0       	rcall	.+22     	; 0x24c <__udivmodhi4>
 236:	07 fc       	sbrc	r0, 7
 238:	05 d0       	rcall	.+10     	; 0x244 <__divmodhi4_neg2>
 23a:	3e f4       	brtc	.+14     	; 0x24a <__divmodhi4_exit>

0000023c <__divmodhi4_neg1>:
 23c:	90 95       	com	r25
 23e:	81 95       	neg	r24
 240:	9f 4f       	sbci	r25, 0xFF	; 255
 242:	08 95       	ret

00000244 <__divmodhi4_neg2>:
 244:	70 95       	com	r23
 246:	61 95       	neg	r22
 248:	7f 4f       	sbci	r23, 0xFF	; 255

0000024a <__divmodhi4_exit>:
 24a:	08 95       	ret

0000024c <__udivmodhi4>:
 24c:	aa 1b       	sub	r26, r26
 24e:	bb 1b       	sub	r27, r27
 250:	51 e1       	ldi	r21, 0x11	; 17
 252:	07 c0       	rjmp	.+14     	; 0x262 <__udivmodhi4_ep>

00000254 <__udivmodhi4_loop>:
 254:	aa 1f       	adc	r26, r26
 256:	bb 1f       	adc	r27, r27
 258:	a6 17       	cp	r26, r22
 25a:	b7 07       	cpc	r27, r23
 25c:	10 f0       	brcs	.+4      	; 0x262 <__udivmodhi4_ep>
 25e:	a6 1b       	sub	r26, r22
 260:	b7 0b       	sbc	r27, r23

00000262 <__udivmodhi4_ep>:
 262:	88 1f       	adc	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	5a 95       	dec	r21
 268:	a9 f7       	brne	.-22     	; 0x254 <__udivmodhi4_loop>
 26a:	80 95       	com	r24
 26c:	90 95       	com	r25
 26e:	bc 01       	movw	r22, r24
 270:	cd 01       	movw	r24, r26
 272:	08 95       	ret

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
