
4_FND(3).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000132  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000151  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000fc  00000000  00000000  00000357  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001d1  00000000  00000000  00000453  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000180  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000cd  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000895  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	3c c0       	rjmp	.+120    	; 0x12e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:

unsigned char SEG[16]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,0x88,0x83,0xc6,0xa1,0x86,0x8e};

int main(void)
{
	DDRA=0xff;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xff;
  bc:	87 bb       	out	0x17, r24	; 23
	DDRC=0x00;
  be:	14 ba       	out	0x14, r1	; 20
	PORTB=0xff;
  c0:	88 bb       	out	0x18, r24	; 24
	int n=0;
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
		var1=PINC&0x0f;
		if(var1==0b00000001) PORTB=0b00001110;
		else if(var1==0b00000010) PORTB=0b00001101;
		else if(var1==0b00000100) PORTB=0b00001011;
		else if(var1==0b00001000) PORTB=0b00000111;
		else PORTB=0xff;
  c6:	7f ef       	ldi	r23, 0xFF	; 255
		PORTA=SEG[n++];
		var1=PINC&0x0f;
		if(var1==0b00000001) PORTB=0b00001110;
		else if(var1==0b00000010) PORTB=0b00001101;
		else if(var1==0b00000100) PORTB=0b00001011;
		else if(var1==0b00001000) PORTB=0b00000111;
  c8:	a7 e0       	ldi	r26, 0x07	; 7
	{
		PORTA=SEG[n++];
		var1=PINC&0x0f;
		if(var1==0b00000001) PORTB=0b00001110;
		else if(var1==0b00000010) PORTB=0b00001101;
		else if(var1==0b00000100) PORTB=0b00001011;
  ca:	fb e0       	ldi	r31, 0x0B	; 11
	while(1)
	{
		PORTA=SEG[n++];
		var1=PINC&0x0f;
		if(var1==0b00000001) PORTB=0b00001110;
		else if(var1==0b00000010) PORTB=0b00001101;
  cc:	ed e0       	ldi	r30, 0x0D	; 13
	unsigned char var1;
	while(1)
	{
		PORTA=SEG[n++];
		var1=PINC&0x0f;
		if(var1==0b00000001) PORTB=0b00001110;
  ce:	6e e0       	ldi	r22, 0x0E	; 14
		else if(var1==0b00000010) PORTB=0b00001101;
		else if(var1==0b00000100) PORTB=0b00001011;
		else if(var1==0b00001000) PORTB=0b00000111;
		else PORTB=0xff;
		_delay_ms(1000);
		if(n>=16) n=0;
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	04 c0       	rjmp	.+8      	; 0xde <main+0x26>
	PORTB=0xff;
	int n=0;
	unsigned char var1;
	while(1)
	{
		PORTA=SEG[n++];
  d6:	c9 01       	movw	r24, r18
  d8:	02 c0       	rjmp	.+4      	; 0xde <main+0x26>
		else if(var1==0b00000010) PORTB=0b00001101;
		else if(var1==0b00000100) PORTB=0b00001011;
		else if(var1==0b00001000) PORTB=0b00000111;
		else PORTB=0xff;
		_delay_ms(1000);
		if(n>=16) n=0;
  da:	85 2f       	mov	r24, r21
  dc:	94 2f       	mov	r25, r20
	PORTB=0xff;
	int n=0;
	unsigned char var1;
	while(1)
	{
		PORTA=SEG[n++];
  de:	9c 01       	movw	r18, r24
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	ec 01       	movw	r28, r24
  e6:	c0 50       	subi	r28, 0x00	; 0
  e8:	df 4f       	sbci	r29, 0xFF	; 255
  ea:	88 81       	ld	r24, Y
  ec:	8b bb       	out	0x1b, r24	; 27
		var1=PINC&0x0f;
  ee:	83 b3       	in	r24, 0x13	; 19
  f0:	8f 70       	andi	r24, 0x0F	; 15
		if(var1==0b00000001) PORTB=0b00001110;
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	11 f4       	brne	.+4      	; 0xfa <main+0x42>
  f6:	68 bb       	out	0x18, r22	; 24
  f8:	0d c0       	rjmp	.+26     	; 0x114 <main+0x5c>
		else if(var1==0b00000010) PORTB=0b00001101;
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	11 f4       	brne	.+4      	; 0x102 <main+0x4a>
  fe:	e8 bb       	out	0x18, r30	; 24
 100:	09 c0       	rjmp	.+18     	; 0x114 <main+0x5c>
		else if(var1==0b00000100) PORTB=0b00001011;
 102:	84 30       	cpi	r24, 0x04	; 4
 104:	11 f4       	brne	.+4      	; 0x10a <main+0x52>
 106:	f8 bb       	out	0x18, r31	; 24
 108:	05 c0       	rjmp	.+10     	; 0x114 <main+0x5c>
		else if(var1==0b00001000) PORTB=0b00000111;
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	11 f4       	brne	.+4      	; 0x112 <main+0x5a>
 10e:	a8 bb       	out	0x18, r26	; 24
 110:	01 c0       	rjmp	.+2      	; 0x114 <main+0x5c>
		else PORTB=0xff;
 112:	78 bb       	out	0x18, r23	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	bc e2       	ldi	r27, 0x2C	; 44
 11a:	81 50       	subi	r24, 0x01	; 1
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	b0 40       	sbci	r27, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x62>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x6c>
 124:	00 00       	nop
		_delay_ms(1000);
		if(n>=16) n=0;
 126:	20 31       	cpi	r18, 0x10	; 16
 128:	31 05       	cpc	r19, r1
 12a:	bc f6       	brge	.-82     	; 0xda <main+0x22>
 12c:	d4 cf       	rjmp	.-88     	; 0xd6 <main+0x1e>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
